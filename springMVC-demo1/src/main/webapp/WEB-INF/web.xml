<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

    <!-- 配置 SpringMVC 的前端控制器 DispatcherServlet，對瀏覽器發送的請求進行統一處理 -->
    <!--
        url-pattern 設置 SpringMVC 的核心控制器所能處理的請求的請求路徑
        / 所匹配的請求可以是 /login 或 .html 或 .js 或 .css 方式的請求路徑
        但是 / 不能匹配 .jsp 請求路徑的請求。
        JSP 本身就是一個 servlet，需要伺服器中特別指定的 servlet 來處理。
        所以這裡不能用 /* 而是用 / 來匹配。
    -->

    <!--
        a)
        默認配置方式
        此配置作用下，SpringMVC 的配置文件默認位於 WEB-INF 下，默認名稱為 <name>-servlet.xml，
        例如，以下配置所對應 SpringMVC 的配置文件位於 WEB-INF 下，文件名為 springMVC-servlet.xml
        如使用此配置，則除了此配置文件外，還需在 WEB-INF 下創建 springMVC-servlet.xml
    -->
    <!--
        <servlet>
            <servlet-name>springMVC</servlet-name>
            <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        </servlet>
        <servlet-mapping>
            <servlet-name>springMVC</servlet-name>
            <url-pattern>/</url-pattern>
        </servlet-mapping>
    -->

    <!--
        b)
        擴展配置方式
        可通過 init-param 標簽設置 SpringMVC 配置文件的位置和名稱，
        通過 load-on-startup 標簽設置 SpringMVC 前端控制器 DispatcherServlet 的初始化時間
    -->
    <servlet>
        <servlet-name>springMVC</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:springMVC.xml</param-value>  <!-- 為 contextConfigLocation 設值來指定配置文件的位置, classpath: = spring application context -->
        </init-param>
        <load-on-startup>1</load-on-startup>  <!-- 將 DispatcherServlet 的初始化時間提前到服務器啟動時 -->
    </servlet>
    <servlet-mapping>
        <servlet-name>springMVC</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>


</web-app>